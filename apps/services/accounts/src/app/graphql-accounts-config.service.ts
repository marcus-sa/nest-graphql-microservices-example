import { Injectable } from '@nestjs/common';
import {GqlModuleOptions, GqlOptionsFactory, GraphQLFactory, GraphQLTypesLoader} from '@nestjs/graphql';
import { buildFederatedSchema } from '@apollo/federation';
import { printSchema } from 'graphql';
import gql from 'graphql-tag';

import { environment } from '../environments/environment';
import { GraphQLSchema } from 'graphql';
import {ApolloServer} from "apollo-server-express";

@Injectable()
export class GqlAccountsConfigService implements GqlOptionsFactory {
  constructor(
    private readonly graphqlFactory: GraphQLFactory,
    private readonly graphqlTypesLoader: GraphQLTypesLoader,
  ) {}

  async createGqlOptions(): Promise<GqlModuleOptions> {
    // this can be generated by gql-gen so no worries
    const typeDefs = await this.graphqlTypesLoader.mergeTypesByPaths(['**/*.graphql']);
    const { resolvers } = await this.graphqlFactory.mergeOptions({
      typePaths: ['**/*.graphql']
    });


    return {
      schema: buildFederatedSchema([
        {
          typeDefs: gql`${typeDefs}`,
          // __resolveReference is missing in the interface
          resolvers: resolvers as any,
        },
      ]),
    };
  }
}
